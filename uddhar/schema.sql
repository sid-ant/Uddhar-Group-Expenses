DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS friend;
DROP TABLE IF EXISTS "group";
DROP TABLE IF EXISTS member;
DROP TABLE IF EXISTS "transaction";

CREATE TABLE user (
  user_id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  email TEXT NOT NULL, 
  phone TEXT,
  name TEXT NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE friend (
  friend_id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_a INTEGER NOT NULL, 
  user_b INTEGER NOT NULL, 
  FOREIGN KEY (user_a) REFERENCES user (id),
  FOREIGN KEY (user_b) REFERENCES user (id)
);


CREATE TABLE "group" (
  group_id INTEGER PRIMARY KEY AUTOINCREMENT, 
  name TEXT NOT NULL, 
  description TEXT,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP   
);

CREATE TABLE "member" (
  member_id INTEGER PRIMARY KEY AUTOINCREMENT, 
  group_id INTEGER, 
  user_id INTEGER,
  FOREIGN KEY (group_id) REFERENCES "group" (group_id),
  FOREIGN KEY (user_id) REFERENCES user (user_id)
);


CREATE TABLE "transaction" (
  t_id INTEGER PRIMARY KEY AUTOINCREMENT, 
  lender INTEGER NOT NULL, 
  borrower INTEGER NOT NULL, 
  amount_given REAL NOT NULL,
  resolved_amount REAL NOT NULL,  
  group_id INTEGER DEFAULT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (lender) REFERENCES user (id),
  FOREIGN KEY (borrower) REFERENCES user (id),
  FOREIGN KEY (group_id) REFERENCES "group" (group_id)
);

